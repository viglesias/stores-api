require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Api::V1::ProductsController do
  it 'sends a list of products' do
    create_list('Api::V1::Product', 3)

    get :index

    expect(response).to be_successful

    products = JSON.parse(response.body, symbolize_names: true)

    expect(products.count).to eq(3)

    products.each do |product|
      expect(product).to have_key(:id)
      expect(product[:id]).to be_an(Integer)

      expect(product).to have_key(:name)
      expect(product[:name]).to be_a(String)

      expect(product).to have_key(:sku)
      expect(product[:sku]).to be_a(String)

      expect(product).to have_key(:price)
      expect(product[:price]).to be_a(Float)
    end
  end

  it 'can get one product by its id' do
    id = create('Api::V1::Product').id

    get :show, params: { id: id }

    product = JSON.parse(response.body, symbolize_names: true)

    expect(response).to be_successful

    expect(product).to have_key(:id)
    expect(product[:id]).to be_an(Integer)

    expect(product).to have_key(:name)
    expect(product[:name]).to be_a(String)

    expect(product).to have_key(:sku)
    expect(product[:sku]).to be_a(String)

    expect(product).to have_key(:price)
    expect(product[:price]).to be_a(Float)
  end

  it 'can create a new product' do
    product_params = {
      name: Faker::Restaurant.name,
      sku: Faker::Restaurant.name,
      product_type: %w[Pizza Complement][rand(0..1)],
      price: Faker::Commerce.price.to_f
    }

    # We include this header to make sure that these params are passed as JSON rather than as plain text
    post :create, params: { product: product_params }
    created_product = Api::V1::Product.last

    expect(response).to be_successful
    expect(created_product.name).to eq(product_params[:name])
    expect(created_product.sku).to eq(product_params[:sku])
    expect(created_product.price).to eq(product_params[:price])
  end

  it 'can update an existing product' do
    id = create('Api::V1::Product').id
    previous_name = Api::V1::Product.last.name
    new_product_name = Faker::Restaurant.name
    product_params = { name: new_product_name }

    # We include this header to make sure that these params are passed as JSON rather than as plain text
    patch :update, params: { id: id, product: product_params }
    product = Api::V1::Product.where(id: id).first
    expect(response).to be_successful
    expect(product.name).to_not eq(previous_name)
    expect(product.name).to eq(new_product_name)
  end

  it 'can destroy a product' do
    product = create('Api::V1::Product')

    expect(Api::V1::Product.count).to eq(1)

    delete :destroy, params: { id: product.id }

    expect(response).to be_successful
    expect(Api::V1::Product.count).to eq(0)
    expect { Api::V1::Product.find(product.id) }.to raise_error(ActiveRecord::RecordNotFound)
  end
end
